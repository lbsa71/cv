<html lang="en">
  <head>
    <title>CV Data Upload</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f9;
        color: #333;
        line-height: 1.6;
      }
      h1,
      h2 {
        color: #444;
        text-align: center;
      }
      p,
      ol,
      section {
        max-width: 800px;
        margin: 20px auto;
        padding: 10px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      ol {
        padding-left: 20px;
      }
      label {
        display: block;
        margin: 10px 0 5px;
      }
      input[type="file"] {
        display: block;
        margin-bottom: 20px;
      }
      button {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }
      button:hover {
        background-color: #0056b3;
      }
      pre {
        background: #f0f0f0;
        padding: 10px;
        border-radius: 5px;
        overflow-x: auto;
      }
    </style>
  </head><body>
    <h1>LinkedIn Data Exporter</h1>
    <p>
      This tool provides a superior alternative to LinkedIn's built-in data
      exporter, offering a more comprehensive and user-friendly experience.
    </p>
    <p>
      Follow the steps below to upload your LinkedIn data and generate a
      professional CV.
    </p>
    <section>
      <h2>Step-by-Step Instructions</h2>
      <ol>
        <li>Go to LinkedIn and navigate to Settings & Privacy.</li>
        <li>
          Under the Data Privacy section, select "Get a copy of your data".
        </li>
        <li>Choose the data you want to export and request the archive.</li>
        <li>Once you receive the email, download the ZIP file.</li>
        <li>Upload the ZIP file below.</li>
      </ol>
    </section>
    <section>
      <h2>Upload Your Files</h2>
      <div>
        <label for="zipInput"><strong>Upload CV Data (ZIP):</strong></label>
        <input type="file" accept=".zip" id="zipInput" />
      </div>
      <div>
        <label for="imageInput"
          ><strong>Upload Profile Picture (Optional):</strong></label
        >
        <input type="file" accept="image/jpeg,image/png" id="imageInput" />
      </div>
      <div>
        <label for="jsonInput"
          ><strong>Upload Position Skills Map (JSON) (Optional):</strong></label
        >
        <input type="file" accept=".json" id="jsonInput" />
      </div>
      <button onclick="handleFileUploadAndProcess()">Start Processing</button>
    </section>
    <section>
      <h2>JSON File Format</h2>
      <p>
        If you choose to upload a JSON file, ensure it follows the format shown
        in the example below:
      </p>
      <pre>
        &#123;
          "position": "Software Engineer",
          "skills": ["JavaScript", "React", "Node.js"]
        &#125;
      </pre>
    </section>

    <script>
      import { generateCV } from "../services/pdf/pdfGenerator";
      import { transformData } from "../services/data/transformationService";
      import { parseCSV } from "@cv/shared/src/utils/csvParser";
      import { defaultConfig } from "@cv/shared";
      import JSZip from "jszip";
      import type { RawData, Config } from "@cv/shared";

      // Declare window interface
      declare global {
        interface Window {
          handleFileUploadAndProcess: () => Promise<void>;
        }
      }

      // Function to handle file upload and processing
      async function handleFileUploadAndProcess() {
        console.log("Handling file upload");
        const zipInput = document.getElementById(
          "zipInput",
        ) as HTMLInputElement;
        const imageInput = document.getElementById(
          "imageInput",
        ) as HTMLInputElement;
        const jsonInput = document.getElementById(
          "jsonInput",
        ) as HTMLInputElement;
        if (!zipInput.files) {
          console.error("ZIP input element not found");
          return;
        }
        const zipFile = zipInput.files[0];
        const imageFile = imageInput.files?.length
          ? imageInput.files[0]
          : undefined;
        const jsonFile = jsonInput.files?.length
          ? jsonInput.files[0]
          : undefined;

        if (!zipFile) {
          console.error("No ZIP file selected");
          return;
        }

        try {
          // Process ZIP file
          const zip = new JSZip();
          const zipContent = await zip.loadAsync(zipFile);
          const rawData: RawData = {};

          const files = zipContent.files;
          if (files) {
            for (const fileName of Object.keys(files)) {
              console.log("Processing file:", fileName);
              const file = files[fileName];
              if (!file) continue;

              if (fileName.endsWith(".csv")) {
                const fileData = await file.async("text");
                const baseName = fileName.split("/").pop();
                if (
                  baseName &&
                  (baseName === "Profile.csv" ||
                    baseName === "Positions.csv" ||
                    baseName === "Projects.csv" ||
                    baseName === "Education.csv" ||
                    baseName === "Email Addresses.csv" ||
                    baseName === "Languages.csv")
                ) {
                  rawData[baseName] = parseCSV(fileData);
                }
              } else if (
                fileName.endsWith(".jpg") ||
                fileName.endsWith(".png")
              ) {
                // Skip image files in ZIP if we have a separate image upload
                if (!imageFile) {
                  const imageData = await file.async("base64");
                  rawData.image = `data:image/jpeg;base64,${imageData}`;
                }
              }
            }
          }

          // Process image file if provided
          if (imageFile) {
            const reader = new FileReader();
            await new Promise((resolve) => {
              reader.onload = () => {
                rawData.image = reader.result as string;
                resolve(null);
              };
              reader.readAsDataURL(imageFile);
            });
          }

          // Process JSON file if provided
          let config: Config;

          if (jsonFile) {
            const jsonContent = await jsonFile.text();
            const customConfig = JSON.parse(jsonContent) as Partial<Config>;
            // Merge custom config with default config
            config = {
              ...defaultConfig,
              ...customConfig,
            };
          }

          console.log("Raw data processed:", rawData);
          const transformedData = transformData(rawData, config);
          console.log("Transformed data:", transformedData);

          await generateCV(transformedData, config);
        } catch (error) {
          console.error("Error processing data:", error);
        }
      }

      // Make the function available to the onclick handler
      window.handleFileUploadAndProcess = handleFileUploadAndProcess;
    </script>
  </body>
</html>
